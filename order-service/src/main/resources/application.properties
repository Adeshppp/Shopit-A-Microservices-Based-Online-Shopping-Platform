# MySQL Database Configuration
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost/OrderService?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=Adeshppp

## Hibernate Properties

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update


# Logging Configuration
# Uncomment the following line to set logging level for the order-service package to DEBUG
#logging.level.org.springframework=DEBUG

# Server Port Configuration
# By declaring 0, Spring Boot will pick a random free port
server.port=0

# Eureka client configurations
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service


## enable actuator
# This section enables the actuator endpoints for the OrderService application.
# The actuator endpoints provide metrics and health information about the application.

# enabling circuit breaker's endpoints in actuator
management.health.circuitbreakers.enabled=true

# by setting *, actuator will expose all kinds of endpoint by default it will expose only health metrics endpoints.
management.endpoints.web.exposure.include=*

# This shows the complete health details of the application in the actuator health endpoint.
management.endpoint.health.show-details=always
#security.basic.enabled=false

## Defining Resilience4j properties

#  We want to see different states of circuit breaker so true
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

# Declaring buffer size as mentioned in readme file
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

# if request from order to inventory fails then circuit breaker won't directly enters into open state from closed state,
# it will wait for certain amounts of requests to fail so to be able to count those failed requests declaring count base and 5.
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5

resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50

# waitDurationInOpenState
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

# permitted Number Of Calls In HalfOpen State
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true


## Resilience4j Timeout properties

resilience4j.timelimiter.instances.inventory.timeout-duration=3s

## Resilience4j Retry properties

resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

## zipkin properties

spring.zipkin.base-url=http://localhost:9411
#tracking 100% of requests, which we are receiving
spring.sleuth.sampler.probability=1.0 


# Apache Kafka properties

# Change the bootstrap servers to the appropriate address and port of your Kafka cluster.
spring.kafka.bootstrap-servers=localhost:9092

# By declaring the property below, we are telling Kafka to use "notificationTopic" as the default topic to send messages.
# If no explicit topic is specified when sending a message, it will be sent to "notificationTopic".
spring.kafka.template.default-topic=notificationTopic

# The property below sets the key serializer for the Kafka producer to the StringSerializer.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

# The property below sets the value serializer for the Kafka producer to the JsonSerializer.
# This serializer allows us to send messages with JSON payloads.
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

